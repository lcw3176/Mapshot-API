plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.google.cloud.tools.jib' version '3.3.1'
//    id 'org.graalvm.buildtools.native' version '0.9.17'
    id "io.sentry.jvm.gradle" version "4.14.1"
}

group = 'com.mapshot'
version = '1'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    asciidoctorExt
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

//
//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("build/docs/asciidoc")
//    into file("src/main/resources/static/docs")
//}
//
//
//build {
//    dependsOn copyDocument
//}


repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // util
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // db
//    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'com.h2database:h2'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'javax.xml.bind:jaxb-api:2.1'

    // rest doc
//    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // 모니터링
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    // https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-api
    implementation 'io.opentelemetry:opentelemetry-api:1.46.0'
    // https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-bom
    implementation 'io.opentelemetry:opentelemetry-context:1.46.0'
    // 국토교통부 데이터 수집
    implementation 'org.jsoup:jsoup:1.17.2'


}

tasks.named('test') {
    useJUnitPlatform()
}


jib {
    from {
        image = "eclipse-temurin:17-jre"
    }

    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
        jvmFlags = ["-Duser.timezone=Asia/Seoul"]
    }
}
//bootBuildImage {
//    imageName = 'mapshot-native'
//    environment = [
//            'BP_JVM_HEAP_SIZE': '400m'
//    ]
//}

sentry {
    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
    // This enables source context, allowing you to see your source
    // code as part of your stack traces in Sentry.
    includeSourceContext = true

    org = "chanwoo-lee-fv"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}




